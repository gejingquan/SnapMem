From 662b193ea1b4b8b77aa4e884170b367d7a6af249 Mon Sep 17 00:00:00 2001
From: gerty1986823 <gerty1986823@126.com>
Date: Thu, 20 Jan 2022 15:56:08 +0800
Subject: [PATCH] gejingquan01

Signed-off-by: gerty1986823 <gerty1986823@126.com>
---
 Makefile                       |  2 +-
 arch/arm64/kernel/cpu_errata.c | 17 ++++++++++++++++-
 kernel/exit.c                  | 26 ++++++++++++++++++++++++++
 kernel/fork.c                  | 22 ++++++++++++++++++++++
 kernel/smp.c                   | 15 +++++++++++++++
 5 files changed, 80 insertions(+), 2 deletions(-)

diff --git a/Makefile b/Makefile
index d4d36c6..41b762f 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@
 VERSION = 5
 PATCHLEVEL = 4
 SUBLEVEL = 0
-EXTRAVERSION =
+EXTRAVERSION = ALLdis2_SnapMem
 NAME = Kleptomaniac Octopus
 
 # *DOCUMENTATION*
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index 93f34b4..182727a 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -484,6 +484,12 @@ static bool has_ssbd_mitigation(const struct arm64_cpu_capabilities *entry,
 	return required;
 }
 
+static void cpu_enable_ssbd_mitigation(const struct arm64_cpu_capabilities *cap)
+{
+	if (ssbd_state != ARM64_SSBD_FORCE_DISABLE)
+		cap->matches(cap, SCOPE_LOCAL_CPU);
+}
+
 /* known invulnerable cores */
 static const struct midr_range arm64_ssb_cpus[] = {
 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A35),
@@ -626,6 +632,12 @@ check_branch_predictor(const struct arm64_cpu_capabilities *entry, int scope)
 	return (need_wa > 0);
 }
 
+static void
+cpu_enable_branch_predictor_hardening(const struct arm64_cpu_capabilities *cap)
+{
+	cap->matches(cap, SCOPE_LOCAL_CPU);
+}
+
 static const __maybe_unused struct midr_range tx2_family_cpus[] = {
 	MIDR_ALL_VERSIONS(MIDR_BRCM_VULCAN),
 	MIDR_ALL_VERSIONS(MIDR_CAVIUM_THUNDERX2),
@@ -872,10 +884,12 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 		ERRATA_MIDR_ALL_VERSIONS(MIDR_CORTEX_A73),
 	},
 #endif
-	{
+	{		
+		.desc = "Branch predictor hardening",
 		.capability = ARM64_HARDEN_BRANCH_PREDICTOR,
 		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
 		.matches = check_branch_predictor,
+		.cpu_enable = cpu_enable_branch_predictor_hardening,				
 	},
 #ifdef CONFIG_HARDEN_EL2_VECTORS
 	{
@@ -889,6 +903,7 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 		.capability = ARM64_SSBD,
 		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
 		.matches = has_ssbd_mitigation,
+		.cpu_enable = cpu_enable_ssbd_mitigation,		
 		.midr_range_list = arm64_ssb_cpus,
 	},
 #ifdef CONFIG_ARM64_ERRATUM_1418040
diff --git a/kernel/exit.c b/kernel/exit.c
index a46a50d..db83f66 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -69,6 +69,16 @@
 #include <asm/pgtable.h>
 #include <asm/mmu_context.h>
 
+
+
+extern unsigned long snapmem_pid[5];
+
+extern unsigned long snapmem[5][1024];
+
+
+extern unsigned long snapmem_enable;
+
+
 static void __unhash_process(struct task_struct *p, bool group_dead)
 {
 	nr_threads--;
@@ -437,6 +447,22 @@ static void exit_mm(void)
 	struct mm_struct *mm = current->mm;
 	struct core_state *core_state;
 
+
+   //-------------------free SnapMem--------------------------
+	if(snapmem_enable==0xdeadbeef){
+		//printk("Check and free SnapMem!");
+		int i;
+		for(i=0;i<5;i++){
+			if(snapmem_pid[i]==current->pid){
+				snapmem_pid[i]=0;
+				break;
+			}
+		}
+	}
+   //---------------------------------------------------------
+
+
+
 	mm_release(current, mm);
 	if (!mm)
 		return;
diff --git a/kernel/fork.c b/kernel/fork.c
index 13b3879..e1e73b22 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -127,6 +127,12 @@ static int max_threads;		/* tunable limit on nr_threads */
 
 #define NAMED_ARRAY_INDEX(x)	[x] = __stringify(x)
 
+
+extern unsigned long snapmem_pid[5];
+
+extern unsigned long snapmem[5][1024];
+
+extern unsigned long snapmem_enable;
 static const char * const resident_page_types[] = {
 	NAMED_ARRAY_INDEX(MM_FILEPAGES),
 	NAMED_ARRAY_INDEX(MM_ANONPAGES),
@@ -1385,6 +1391,22 @@ static int copy_mm(unsigned long clone_flags, struct task_struct *tsk)
 	struct mm_struct *mm, *oldmm;
 	int retval;
 
+
+   //-------------------free SnapMem--------------------------
+   if(snapmem_enable==0xdeadbeef){
+		//printk("Check and free SnapMem!");
+		int i;
+		for(i=0;i<5;i++){
+			if(snapmem_pid[i]==current->pid){
+				snapmem_pid[i]=0;
+				break;
+			}
+		}
+    }
+   //---------------------------------------------------------
+
+
+
 	tsk->min_flt = tsk->maj_flt = 0;
 	tsk->nvcsw = tsk->nivcsw = 0;
 #ifdef CONFIG_DETECT_HUNG_TASK
diff --git a/kernel/smp.c b/kernel/smp.c
index 7dbcb40..81bc913 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -603,6 +603,21 @@ void __init smp_init(void)
 	smp_cpus_done(setup_max_cpus);
 }
 
+unsigned long snapmem[5][1024];
+
+EXPORT_SYMBOL(snapmem);
+
+
+unsigned long snapmem_pid[5];
+
+EXPORT_SYMBOL(snapmem_pid);
+
+
+unsigned long snapmem_enable;
+
+EXPORT_SYMBOL(snapmem_enable);
+
+
 /*
  * Call a function on all processors.  May be used during early boot while
  * early_boot_irqs_disabled is set.  Use local_irq_save/restore() instead
-- 
2.7.4

